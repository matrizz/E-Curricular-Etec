
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        


model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  rm            String    @unique
  passwordHash  String
  role          Role      @default(USER)
  hasCurriculum Boolean   @default(false)
  resetToken    String?
  resetTokenExp DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  curriculum    Curriculum?
  
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Curriculum {
  id                 String                @id @default(cuid())
  name               String
  email              String                @unique
  rm                 String                @unique
  phone              String                @unique
  phone2             String?               @unique
  birth              DateTime
  image              String?
  genre              String
  street             String
  city               String
  state              String
  zip                String
  course             String
  objective          String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  additionalEducation AdditionalEducation[]
  extracurricular    Extracurricular[]
  experience         Experience[]
  skills             Skill[]
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String                @unique
}

model AdditionalEducation {
  id           String     @id @default(cuid())
  name         String
  startYear    String
  endYear      String?
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  curriculumId String
}

model Extracurricular {
  id           String     @id @default(cuid())
  name         String
  hours        Int
  description  String?
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  curriculumId String
}

model Experience {
  id           String     @id @default(cuid())
  company      String
  position     String
  period       String
  description  String?
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  curriculumId String
}

model Skill {
  id           String     @id @default(cuid())
  name         String
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  curriculumId String

  @@unique([name, curriculumId])
}

